import time

class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def dfs_recursive(node, visited=None):
    if visited is None:
        visited = []
    if node is not None:
        visited.append(node.value)
        dfs_recursive(node.left, visited)
        dfs_recursive(node.right, visited)
    return visited

def dfs_iterative(root):
    if root is None:
        return []
    
    stack = [root]
    visited = []
    
    while stack:
        node = stack.pop()
        visited.append(node.value)
        
        if node.right is not None:
            stack.append(node.right)
        if node.left is not None:
            stack.append(node.left)
    
    return visited

def measure_execution_time_dfs(func, root):
    start_time = time.time()
    func(root)
    end_time = time.time()
    execution_time = end_time - start_time
    return execution_time

# Contoh Penggunaan
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)

# Menjalankan DFS Rekursif
visited_nodes_recursive = dfs_recursive(root)
execution_time_recursive = measure_execution_time_dfs(dfs_recursive, root)
print("Hasil DFS Rekursif:", visited_nodes_recursive)
print("Waktu Eksekusi DFS Rekursif:", execution_time_recursive)

# Menjalankan DFS Iteratif
visited_nodes_iterative = dfs_iterative(root)
execution_time_iterative = measure_execution_time_dfs(dfs_iterative, root)
print("Hasil DFS Iteratif:", visited_nodes_iterative)
print("Waktu Eksekusi DFS Iteratif:", execution_time_iterative)
